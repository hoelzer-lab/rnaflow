manifest {
    mainScript = 'main.nf'
    nextflowVersion = '>=21.05.0'
}

tower {
    accessToken = ''
    enabled = false
} 

// default parameters
params {
    max_cores = Runtime.runtime.availableProcessors()
    cores = "1"
    memory = 8.GB

    profile = false
    help = false

    // input
    reads = ''
    genome = ''
    annotation = ''
    deg = ''
    autodownload = ''
    pathway = ''
    nanopore = false
    
    species = ''  // deprecated reminder
    include_species = false  // deprecated reminder

    // parameters
    strand = ''
    mode = ''
    tpm = 1
    fastp_additional_params = '-5 -3 -W 4 -M 20 -l 15 -x -n 5 -z 6'
    hisat2_additional_params = ''
    minimap2_additional_params = ''
    featurecounts_additional_params = '-t exon -g gene_id' // default values
    feature_id_type = 'ensembl_gene_id'
    rna = false
    setup = false

    busco_db = 'euarchontoglires'
    dammit_uniref90 = false

    skip_sortmerna = false
    skip_read_preprocessing = false
    assembly = false
  
    // folder structure
    output = 'results'
    fastp_dir = '01-Trimming/fastp'
    sortmerna_dir = '02-rRNARemoval/SortMeRNA'
    hisat2_dir = '03-Mapping/HISAT2'
    minimap2_dir = '03-Mapping/MINIMAP2'
    featurecounts_dir = '04-Counting/featureCounts'
    tpm_filter_dir = '05-CountingFilter/TPM'
    annotation_dir = '06-Annotation'
    deseq2_dir = '07-DifferentialExpression/DESeq2'
    assembly_dir = '08-Assembly/de_novo'
    rnaseq_annotation_dir = '09-RNA-Seq_Annotation/'
    // if the UniRef90 option for dammit is activated via --dammit_uniref90, this parameter will be set to 'uniref90' for the dammit output 
    uniref90_dir = '' 
    multiqc_dir = 'Summary'
    readqc_dir = 'Summary/NanoPlot'
    nf_runinfo_dir = 'Logs'

    // location for autodownload data like databases
    permanentCacheDir = 'nextflow-autodownload-databases'
    // location for storing the conda environments
    condaCacheDir = 'conda'
    // location for storing the singularity images
    singularityCacheDir = 'singularity'

    // softlink results instead of copying
    softlink_results = false

    cloudProcess = false
}


timeline {
  enabled = true
  file = "${params.output}/${params.nf_runinfo_dir}/execution_timeline.html"
}

report {
  enabled = true
  file = "${params.output}/${params.nf_runinfo_dir}/execution_report.html"
}

profiles {
    
    ////////////////////////////////////////////////////
    // executors

    local {
        executor {
            name = "local"
            cpus = params.max_cores
            memory = params.memory
        }
        params.cloudProcess = false
        includeConfig 'configs/local.config'
    }

    slurm {
        executor {
            name = "slurm"
            queueSize = params.setup ? 1 : 100
            // exitReadTimeout = "360 sec"
            // submitRateLimit = '1 / 2 s'
            // pollInterval = '30 sec'
        }
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/nodes.config'
    }

    lsf {
        executor {
            name = "lsf"
            queueSize = params.setup ? 1 : 100
            // exitReadTimeout = "360 sec"
            // submitRateLimit = '1 / 2 s'
            // pollInterval = '30 sec'
        }
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/nodes.config'
    }
    
    latency {
        executor {
            pollInterval = '5 min'
            queueStatInterval = '8 min'
            dumpInterval = '10 min'
        }
    }


    ////////////////////////////////////////////////////
    // engines 

    conda {
        // can be removed if we have working conda envs for all tools!
        docker { enabled = true }
        conda{
            enabled = true
            cacheDir = params.condaCacheDir
            timeout = '45 min'
        }
        includeConfig 'configs/conda.config'
    }
    mamba {
        // can be removed if we have working conda envs for all tools!
        docker { enabled = true }
        conda{
            cacheDir = params.condaCacheDir
            timeout = '45 min'
            useMamba = true
        }
        includeConfig 'configs/conda.config'
    }

    docker {
        docker { 
            enabled = true
        }
        includeConfig 'configs/container.config'
    }

    singularity {
        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.singularityCacheDir
        }
        includeConfig 'configs/container.config'
    }


    ////////////////////////////////////////////////////
    // predefined combinations

    // local execution with conda
    standard {
        executor {
            name = "local"
            cpus = params.max_cores
            memory = params.memory
        }
        params.cloudProcess = false
        conda { cacheDir = params.condaCacheDir }
        includeConfig 'configs/local.config'
        includeConfig 'configs/conda.config' 
    }

    test {
        params.reads = "$baseDir/test-data/input.se.hsa_small.csv"
        params.autodownload = 'hsa'
        params.pathway = 'hsa'
        params.species = 'hsa'  // deprecated reminder
        params.include_species = false  // deprecated reminder
        params.max_cores = '4'
        params.cores = '2'
    }
    
    // ARA specific profile
    ara {
        params.cloudProcess = true
        workDir = "/beegfs/rna-hta/$USER/work"
        params.permanentCacheDir = "/beegfs/rna-hta/nextflow-rnaflow-autodownload/"
        conda { cacheDir = "/beegfs/rna-hta/$USER/nextflow-conda-cache" }
        process {
            clusterOptions = '--partition=s_standard,s_fat,b_standard,b_fat'
            withLabel: smallTask { executor = 'local' }
        }
        executor {
            name = "slurm"
            queueSize = 100
        }        
        process.cache = "lenient"
        includeConfig 'configs/nodes.config'
        includeConfig 'configs/conda.config' }

    // cloud configs
    node {
        params.cloudProcess = true
        docker { enabled = true }
        includeConfig 'configs/nodes.config'
        includeConfig 'configs/container.config'
    }
}
